----------------------------------------------------------------------------------------

April 29, 2020

I thought about it and I decided I'm willing to say that the problem with the stale closure
from fade-in-for-seconds is the fault of the lisp programmer Jason, not the javascript programmer
Jason. Closures really aren't a great place to store data. I'm just doing it this way
because it's the only thing I have implemented, other than lists. I think it highlights for
me the importance of getting orgs working. However I did have one thought: if it's possible
to store data in a closure, then in some sense they are like structs or objects.
So we can't we have accessor methods that look up data in a closure, if you have a
reference to one? Or that even allow you to modify it. Might be helpful for debugging.
Could we erase the distinction between closures and objects/orgs?

In other news, copying expectations failed because I wasn't activating the newly
copied expectation if the old one was already activated. This is a bit questionable
anyway because maybe you don't want to do that, right? Let's say you have a long
running process/animation that takes 20 minutes and you are 19 minutes through it.
When you copy it, it resets the clock for the copied one. Here's the thing though,
if I don't do that, then if I copy a list that contains an animation,
like I do whenever I apply styles, the animations in the newly copied list will
not be activated.

What to do.

Oh also, I would have to make sure I copy the children of a list before copying the
fields of the list because activating does different things depending on whether
an exp has children or not.

I guess I could write a function that reactivates any nodes that are not activated.

I am getting to the part of the development process where the right thing to do is
not always obvious -- which is, I guess, why I'm writing this stuff down.

----------------------------------------------------------------------------------------

April 28, 2020 (entry 2)

When we copy an environment, we don't copy the environments of closures in the environment.

When we create a closure, we copy its environment, because we want that closure to have its
own private copy of all those variables. However we don't copy the environments of the closures
referred to in the environment being copied, because then those closures wouldn't have their
own memory space that can vary independently.

Right? This is how we are able to have "lexical" environment. Each closure is generated
from a different place in the source code.

But when we copy expectations we can have subtle bugs. Currently, in animation-functions,
when you call fade-in-for-seconds, do-on-every-for creates a closure with a local environment
that captures a "val" variable which is supposed to encode the value to set the opacity to.
That closure gets passed into do-on-every-for, and it's called 'f'.

do-on-every-for creates an expectation. That expectation has an ff-with closure.
The ff-with closure has a local environment with a reference to 'f'.

when the expectation returned by do-on-every-for is copied, its closure is copied,
and that environment is copied. But the environment in the closure pointed to
by 'f' is NOT copied, so the next time it's called, it still has the final value
that it had the last time the animation ran through from 0 to 1. So it will
run through again, from 1 to 2.

I'm not sure why this causes problems with async code but not with normal lisp.
I'll have to think about that. It seems like it would be infeasible to copy
the environment differently when copying the closures inside expectations.
it is a different use case for sure (copying because you're creating a closure
vs. copying because you're copying an expectation) so it seems logically
justifiable. However the problem is that it's not just symbols in the environment
pointing to closures -- you could store a closure in a list, or in a list inside
a list, etc. So I'll have to think about it.

I'll also have to do an experiment in js or real lisp to verify my original assumption, i.e.
the first sentence of this entry: When we copy an environment, we don't copy the environments
of closures in the environment.

I mean in both cases we are copying environments, but for different reasons:

1. we are copying environments so each closure has its own copy of the values of
things in the lexical part of the code where the closure was created

2. we are copying environments so the copied expectation has a snapshot in time
of the entire memory space of the program at the time it was copied, so when it is
activated or fulfilled later the program hasn't changed unexpectedly




----------------------------------------------------------------------------------------

April 28, 2020

Here's how I was going to deal with bridging between actual asyncronous javascript functions
(like loading files, timeouts, etc) and expectations:

- builtin calls getCallbackForSet, which returns a callback that fulfills the expectation
- builtin makes its own javascript closure capturing necessary lexical environment which
  does something asyncronous (like load or save a file), then calls the callback
- builtin makes a call to "set" passing the javascript closure it just made. That closure
  is the "activation function". When activate is called, the activation function is called
  and the asyncronous process is kicked off.

however this won't work because if the expectation is copied, it's expected that
both copies will still be able to be activated. But if they both get the same activation
function they will fulfill the same expectation (the original one) because there's no
way to copy a function in js.

What I need the builtin to do is give this expectation an activation function generator.

The builtin would call it like this:
let e = new Expectation();
e.set(function(callback) {
  return function() {
    let f = loadFile(function(loadedFile) {
      callback(loadedFile);
    });
  }
})

So it's, annoyingly, three nested closures, but there's no way around it.
Outer closure generates an activation function.
Middle closure is the activation function, which gets called when the exp gets activated
Inner closure is the callback from whatever async operation is being actually done.

Also: Yesterday  I was dealing with trying to suppress activation of expectations in different places.
I made a way to indicate suppressing activation in the param list of a function,
but then I also made a way to suppress activation from the return value of a function.
However I think this is bad.  It seems like you might get in a fight where a certain call site
has a return value set to skip activation but it's an arg that doesn't skip activation,
and it's hard to debug - precedence rules -- blah blah annoying and complicated.
I think we might need to pick where we want to suppress activation.

The current situation: the loop primitive doesn't work with fade-in (thought it might work with other ones).
It's looping alright, but something about the way fade-in works is storing
the opacity value in a closure somewhere so that every time it loops
it keeps incrementing past one (I debugged after 20 iterations
and it was setting the opacity to 20.183333)

----------------------------------------------------------------------------------------

April 25, 2020

expectations are either activated when they are evaluated, or not. Every param to a function
is evaluated of course but what if I had an equivalent to "skipeval"
but just for expectations, like "skip activate"
so it would be indicated by a comma instead of a * in the type signature.


----------------------------------------------------------------------------------------
April 20, 2020

copying expectations sort of works but still doesn't work.
Here's the code for do-on-every:

(& f nex interval
	(~let @exp (~cons @nex (* )))
	(~let @fff (& n
		(~reset @exp)
		(~ff-with @exp @fff)
		(~set-delay @exp @interval)
		(~f @n)
	))
	(~set-delay (~ff-with @exp @fff) @interval)
)

"reset" is not being called on the correct expectation. it has a stale pointer to
some other expectation that is not the one that was copied.
Which makes sense, because when we copy this expectation, we don't
update anything that points to it.

This is not caused by the fact that we copy the closure when we copy the expectation.
Even if we didn't copy the closure, the closure owned by the copied
expectation would still point to the wrong thing. In fact, it would be worse,
because it would point to the same (original) expectation that was discarded
after the copy, which means that that expectation would get ff called on it twice.
Worse? Better? IDK, just wrong differently. Maybe better because it wouldn't
fail as silently. This fails silently because the copied expectation is distinct
but is still not the one on the screen.

It could be fixed by having ff-with take the expectation as its argument
rather than the contents of the expectation. The return value of ff-with
would still be the new contents of the expectation. It's just that you'd
have to get the car if you didn't want to reset the expectation.

I could put in some error checking to prevent you from accidentally returning
the expectation from ff-with (this would be a common mistake and basically
would always be wrong)

this is a very flexible solution in that you could ostensibly do other things like
chain the expectation to other things etc. Also the expectation itself is the
"most you know" at fulfill time, i.e. you can't go higher to the parent but
you do have a pointer to the expectation that is being fulfille	d.

I'm not sure I can think of a fancier/better solution.


----------------------------------------------------------------------------------------
April 19, 2020

When a function creates multiple closures, each one needs its own set of symbols
that can vary independently.

let f = function() {
    let a = [];
    for (let i = 0;i < 10; i++) {
        let r = Math.random();
        a.push(function() {
            console.log(r);
        });
    }
    return a;
}
let m = f();
m[0](); // prints 0.4358334282486591
m[1](); // prints 0.8695053811494855
m[0](); // prints 0.4358334282486591

When we do copy, we can make shallow copies - example:

let f = function() {
   let a = [1, 2, 3];
   let funcs = [];
   for (let i = 0; i < 10; i++) {
      funcs.push(function() {
         console.log(a[0]);
         a[0] = i;
      });
   }
   return funcs;
}

let fs = f();
fs[0](); // prints 1
fs[3](); // prints 0
fs[0](); // prints 3

Each function gets its own private copy of a that it can modify, but the contents of a are shared.


/*
let f = function() {
    let a = [];
    for (let i = 0;i < 10; i++) {
        let r = Math.random();
        a.push(function() {
            console.log(r);
        });
    }
    return a;
}
let m = f();
m[0]();
 // prints 0.4358334282486591
m[1]();
 // prints 0.8695053811494855
m[0]();
 // prints 0.4358334282486591

the lambda needs to return a closure when it is evaluated
a closure needs to be a separate object
a closure has a pointer to an environment
the environment that it points to is a copy, going ALL THE WAY UP THE STACK TO THE ROOT
of the environment that existed at the time the lambda was evaluated

----------------------------------------------------------------------------------------
April 15, 2020


here's my type system:


DONE - a tag is an identifier associated with a program element

DONE - a org is a special list

DONE - an org can have children that are tagged

DONE - at evaluation time, if an expression is tagged, the evaluator will check after evaluation
to see whether the expression evaluated to an org. If it did, then the evaluator will
retrieve the child matching the tag, and evaluate that

if an expression has multiple tags, the evaluator will resolve them in the order they are specified,
and use the first one that works (note: need to think more about this because what if an obj has multiple children with the same tag, what if a nex has two of the same tag, etc)

DONE - It is not an error if the returned org doesn't have that tag (unless strict mode?)

DONE - If dereferencing the tag returns another org, the evaluator will dereference again. It will keep dereferencing until:
1. the dereferencing step stops returning orgs 2. it runs out of matching tags

types:
- the type of an integer, string, etc. is just that
- the type of a lambda is a specifier containing its return value, args, etc
- the type of an org is an unordered list of tags. an org is of a given type if it contains all the tags
  in the list
- a contract is some trustable assertion about a tag, as in "you know that something with this tag is _blank_".
  - contracts are enforced at the time the tag is assigned to the nex
  - types of contracts
    - identity contract: a tag can only be assigned to a specific object
    - equality contract: a tag can only be assigned to an object that evaluates as equal to a given value
    - simple type contract: something with tag Foo must be an integer
    - lambda exclusive type contract: something with tag Foo must be a lambda with the exact type string -# arg# arg#
    - lambda inclusive type contract: something with tag Foo must be a lambda that could allow arguments that match a given type string
    - list exclusive tag contents contract: something with tag Foo must be an list containing things with
      tags Foo, Bar, and Baz and nothing else (note: it doesn't have to be an org, but if it's not an org,
      it can't be dereferenced)
    - list inclusive tag contents contract: something with tag Foo must be an list containing things with tags
      Foo, Bar, and Baz, but it could have other things
    - list exclusive type contents contract: something with tag Foo must be a list with two integers and nothing else (or whatever)
    - list inclusive type contents contract: something with tag Foo must be a list with at least two integers, could have other things
    - something with tag Foo must also have tags Bar, Baz, and Qux (this is how you do 'contract contract', i.e. enforce
      that a nex satisfies multiple contracts)
    - custom contract: you implement a function in Vodka that returns true or false, and at contract-check time
      the framework evaluates your function, passing in the nex that is being checked for whether it satisfies the contract
      

contracts are only checked at tag assignment time for performance reasons, but there can be a primitive that
re-checks contracts



- a kind is an restriction that states that a given tag can only be assigned to something with a given type
- lambda type strings can also include tags, which indicate that the thing passed in must have that tag

examples of lambda type strings:

arg1 arg2
    two args of any type

arg1# arg2#
    two integers

arg1! arg2!
    two booleans

arg1& arg2&
    two lambdas

arg1* arg2*
    two expectations

arg1@ arg2@
    two symbols

_arg1@ arg2@
    two symbols, but the first one is not evaluated before being passed

arg1% arg2#...
    a float and then zero or more integers (variadic argument)

arg1% arg2#?
    a float and then an optional integer

_arg1~ arg2~
    two commands - the first is unevaluated, but the second needs to be returned by
    the evaluation step for the second argument

arg1( arg2(
    two lists

arg1#[Magnitude] arg2#
    two integers, but the first one has to be tagged with 'Magnitude'

arg1) arg2)
    two orgs, any type

arg1)[Magnitude] arg2)
    two orgs, but the first one has to be tagged with 'Magnitude'

-# arg1#
    this function takes an integer and returns an integer

-)[Magnitude] arg1#
    this function takes an integer and returns an obj tagged with 'Magnitude'




experimental features regarding return values:

- setting '-' would set the return value
-#?
    this function can return an integer but it can also return 'nothing', which means
    the evaluator removes whatever it returned from the arg list of what it was in.
-#...
    this function can return more than one thing
_-
    this function is not evaluated, e.g. so if you had:
    (~bind @do-not-do (&_-# (~+ #3 #3)))
    we have a function that adds 3 + 3 and returns an integer, but it's not evaluated.
    this means that if you have this:
    (~+ #9 (~do-not-do))
    it fails because the (~do-not-do) is basically treated like it's been quoted, but this:
    (~+ #9 (~eval (~do-not-do)))
    would work fine because "skip eval" only applies to the first time basically:
    that is to say, if a "do not eval" function is evaluated, it loses its "do not eval" status.


- make it so that anything inside braces in a tag, i.e. [] is ignored (use this for comments?)