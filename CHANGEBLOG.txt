April 25, 2020
expectations are either activated when they are evaluated, or not. Every param to a function
is evaluated of course but what if I had an equivalent to "skipeval"
but just for expectations, like "skip activate"
so it would be indicated by a comma instead of a * in the type signature.

----------------------------------------------------------------------------------------
April 20, 2020

copying expectations sort of works but still doesn't work.
Here's the code for do-on-every:

(& f nex interval
	(~let @exp (~cons @nex (* )))
	(~let @fff (& n
		(~reset @exp)
		(~ff-with @exp @fff)
		(~set-delay @exp @interval)
		(~f @n)
	))
	(~set-delay (~ff-with @exp @fff) @interval)
)

"reset" is not being called on the correct expectation. it has a stale pointer to
some other expectation that is not the one that was copied.
Which makes sense, because when we copy this expectation, we don't
update anything that points to it.

This is not caused by the fact that we copy the closure when we copy the expectation.
Even if we didn't copy the closure, the closure owned by the copied
expectation would still point to the wrong thing. In fact, it would be worse,
because it would point to the same (original) expectation that was discarded
after the copy, which means that that expectation would get ff called on it twice.
Worse? Better? IDK, just wrong differently. Maybe better because it wouldn't
fail as silently. This fails silently because the copied expectation is distinct
but is still not the one on the screen.

It could be fixed by having ff-with take the expectation as its argument
rather than the contents of the expectation. The return value of ff-with
would still be the new contents of the expectation. It's just that you'd
have to get the car if you didn't want to reset the expectation.

I could put in some error checking to prevent you from accidentally returning
the expectation from ff-with (this would be a common mistake and basically
would always be wrong)

this is a very flexible solution in that you could ostensibly do other things like
chain the expectation to other things etc. Also the expectation itself is the
"most you know" at fulfill time, i.e. you can't go higher to the parent but
you do have a pointer to the expectation that is being fulfille	d.

I'm not sure I can think of a fancier/better solution.


----------------------------------------------------------------------------------------
April 19, 2020

When a function creates multiple closures, each one needs its own set of symbols
that can vary independently.

let f = function() {
    let a = [];
    for (let i = 0;i < 10; i++) {
        let r = Math.random();
        a.push(function() {
            console.log(r);
        });
    }
    return a;
}
let m = f();
m[0](); // prints 0.4358334282486591
m[1](); // prints 0.8695053811494855
m[0](); // prints 0.4358334282486591

When we do copy, we can make shallow copies - example:

let f = function() {
   let a = [1, 2, 3];
   let funcs = [];
   for (let i = 0; i < 10; i++) {
      funcs.push(function() {
         console.log(a[0]);
         a[0] = i;
      });
   }
   return funcs;
}

let fs = f();
fs[0](); // prints 1
fs[3](); // prints 0
fs[0](); // prints 3

Each function gets its own private copy of a that it can modify, but the contents of a are shared.


/*
let f = function() {
    let a = [];
    for (let i = 0;i < 10; i++) {
        let r = Math.random();
        a.push(function() {
            console.log(r);
        });
    }
    return a;
}
let m = f();
m[0]();
 // prints 0.4358334282486591
m[1]();
 // prints 0.8695053811494855
m[0]();
 // prints 0.4358334282486591

the lambda needs to return a closure when it is evaluated
a closure needs to be a separate object
a closure has a pointer to an environment
the environment that it points to is a copy, going ALL THE WAY UP THE STACK TO THE ROOT
of the environment that existed at the time the lambda was evaluated

----------------------------------------------------------------------------------------
April 15, 2020


here's my type system:


DONE - a tag is an identifier associated with a program element

DONE - a org is a special list

DONE - an org can have children that are tagged

DONE - at evaluation time, if an expression is tagged, the evaluator will check after evaluation
to see whether the expression evaluated to an org. If it did, then the evaluator will
retrieve the child matching the tag, and evaluate that

if an expression has multiple tags, the evaluator will resolve them in the order they are specified,
and use the first one that works (note: need to think more about this because what if an obj has multiple children with the same tag, what if a nex has two of the same tag, etc)

DONE - It is not an error if the returned org doesn't have that tag (unless strict mode?)

DONE - If dereferencing the tag returns another org, the evaluator will dereference again. It will keep dereferencing until:
1. the dereferencing step stops returning orgs 2. it runs out of matching tags

types:
- the type of an integer, string, etc. is just that
- the type of a lambda is a specifier containing its return value, args, etc
- the type of an org is an unordered list of tags. an org is of a given type if it contains all the tags
  in the list
- a contract is some trustable assertion about a tag, as in "you know that something with this tag is _blank_".
  - contracts are enforced at the time the tag is assigned to the nex
  - types of contracts
    - identity contract: a tag can only be assigned to a specific object
    - equality contract: a tag can only be assigned to an object that evaluates as equal to a given value
    - simple type contract: something with tag Foo must be an integer
    - lambda exclusive type contract: something with tag Foo must be a lambda with the exact type string -# arg# arg#
    - lambda inclusive type contract: something with tag Foo must be a lambda that could allow arguments that match a given type string
    - list exclusive tag contents contract: something with tag Foo must be an list containing things with
      tags Foo, Bar, and Baz and nothing else (note: it doesn't have to be an org, but if it's not an org,
      it can't be dereferenced)
    - list inclusive tag contents contract: something with tag Foo must be an list containing things with tags
      Foo, Bar, and Baz, but it could have other things
    - list exclusive type contents contract: something with tag Foo must be a list with two integers and nothing else (or whatever)
    - list inclusive type contents contract: something with tag Foo must be a list with at least two integers, could have other things
    - something with tag Foo must also have tags Bar, Baz, and Qux (this is how you do 'contract contract', i.e. enforce
      that a nex satisfies multiple contracts)
    - custom contract: you implement a function in Vodka that returns true or false, and at contract-check time
      the framework evaluates your function, passing in the nex that is being checked for whether it satisfies the contract
      

contracts are only checked at tag assignment time for performance reasons, but there can be a primitive that
re-checks contracts



- a kind is an restriction that states that a given tag can only be assigned to something with a given type
- lambda type strings can also include tags, which indicate that the thing passed in must have that tag

examples of lambda type strings:

arg1 arg2
    two args of any type

arg1# arg2#
    two integers

arg1! arg2!
    two booleans

arg1& arg2&
    two lambdas

arg1* arg2*
    two expectations

arg1@ arg2@
    two symbols

_arg1@ arg2@
    two symbols, but the first one is not evaluated before being passed

arg1% arg2#...
    a float and then zero or more integers (variadic argument)

arg1% arg2#?
    a float and then an optional integer

_arg1~ arg2~
    two commands - the first is unevaluated, but the second needs to be returned by
    the evaluation step for the second argument

arg1( arg2(
    two lists

arg1#[Magnitude] arg2#
    two integers, but the first one has to be tagged with 'Magnitude'

arg1) arg2)
    two orgs, any type

arg1)[Magnitude] arg2)
    two orgs, but the first one has to be tagged with 'Magnitude'

-# arg1#
    this function takes an integer and returns an integer

-)[Magnitude] arg1#
    this function takes an integer and returns an obj tagged with 'Magnitude'




experimental features regarding return values:

- setting '-' would set the return value
-#?
    this function can return an integer but it can also return 'nothing', which means
    the evaluator removes whatever it returned from the arg list of what it was in.
-#...
    this function can return more than one thing
_-
    this function is not evaluated, e.g. so if you had:
    (~bind @do-not-do (&_-# (~+ #3 #3)))
    we have a function that adds 3 + 3 and returns an integer, but it's not evaluated.
    this means that if you have this:
    (~+ #9 (~do-not-do))
    it fails because the (~do-not-do) is basically treated like it's been quoted, but this:
    (~+ #9 (~eval (~do-not-do)))
    would work fine because "skip eval" only applies to the first time basically:
    that is to say, if a "do not eval" function is evaluated, it loses its "do not eval" status.


- make it so that anything inside braces in a tag, i.e. [] is ignored (use this for comments?)